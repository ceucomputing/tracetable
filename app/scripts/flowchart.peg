{
  var labels = {};
  var vars = {};
  var varsList = [];
}

start
  = c:commands { return { "labels": labels, "vars": vars, "varsList": varsList, "commands": c }; }

commands
  = c:command rest:("\n"+ d:command { return d; })+ "\n"* { return [c].concat(rest); }
  / c:command "\n"* { return [vars, c]; }

s
  = " "*

command
  = l:label s ":" s c:unlabelledCommand { labels[l] = line()-1; return c; }
  / unlabelledCommand

unlabelledCommand
  = c:unlabelledUnchainedCommand s "->" s chain:label { c["chain"] = chain; return c; }
  / unlabelledUnchainedCommand

unlabelledUnchainedCommand
  = "START" { return { "command": "START", "title":"Start" }; }
  / "END" { return { "command": "END", "title":"End" }; }
  / "INPUT" s v:variable { return { "command": "INPUT", "title": "INPUT " + v["title"], "code": v["code"] + "=tracetableInput(\"" + v["title"] + "\")", "var": v["title"] }; }
  / "OUTPUT" s e:expression { return { "command": "OUTPUT", "title": "OUTPUT " + e["title"], "code": "tracetableOutput(" + e["code"] + ")" }; }
  / "JUMPIF" s c:condition s "?" s then:label { return { "command": "JUMPIF", "title": c["title"] + "?", "condition": c["code"], "then": then }; }
  / "ASSIGN" s v:variable s "=" s e:expression { return { "command": "ASSIGN", "title": v["title"] + " = " + e["title"], "code": v["code"] + "=" + e["code"], "var": v["title"] }; }

condition
  = l:expression s "=" s r:expression { return { "title": l["title"] + " = " + r["title"], "code": "(" + l["code"] + ")==(" + r["code"] + ")" }; }
  / l:expression s "<" s r:expression { return { "title": l["title"] + " < " + r["title"], "code": "(" + l["code"] + ")<(" + r["code"] + ")" }; }
  / l:expression s ">" s r:expression { return { "title": l["title"] + " > " + r["title"], "code": "(" + l["code"] + ")>(" + r["code"] + ")" }; }

expression
  = additive
  / string

additive
  = l:multiplicative s op:[+-] s r:additive { return { "title": l["title"] + " " + op + " " + r["title"], "code": l["code"] + op + r["code"] }; }
  / multiplicative

multiplicative
  = l:primary s op:[*/] s r:multiplicative { return { "title": l["title"] + " " + op + " " + r["title"], "code": l["code"] + op + r["code"] }; }
  / primary

primary
  = integer
  / "(" s additive:additive s ")" { return { "title": "(" + additive["title"] + ")", "code": "(" + additive["code"] + ")" }; }
  / variable

integer "integer"
  = digits:[0-9]+ { return { "title": digits.join(""), "code": digits.join("") }; }

label
  = i:identifier { return "label_" + i; }

variable
  = v:identifier { if (!(v in vars)) { vars[v] = varsList.length; varsList.push(v); } return { "title": v, "code": "tracetableScope[\"" + v + "\"]" }; }

string
  = "\"" s:[a-zA-Z0-9 ]* "\"" { return { "title": "'" + s.join("") + "'", "code": "\"" + s.join("") + "\"" }; }

identifier
  = letters:[a-zA-Z]+ { return letters.join(""); }
